openapi: 3.0.1
info:
  title: Autenticação
  description: Realize a autenticação mTLS.
  version: "1.0"
servers:
  - url: https://login.sandbox.bankly.com.br
paths:
  /connect/token:
    post:
      tags:
        - Autenticação com mTLS
      summary: Token para gerar certificado mTLS
      description: |
        <div class="bkly-ref-description">
          <p>[Stable] Obtenha um token de acesso para gerar o certificado mTLS.</p>  
          <b>Scope: certificate.create</b>
        </div>
      operationId: GetAccount
      requestBody:
        content:
          Grant_type:
            x-www-form-urlencoded:
              name: grant_type
              required: true
              default: client_credentials
              schema:
                type: string
                description: Método pelo qual suas aplicações podem obter tokens de acesso.
          Client_id:
            x-www-form-urlencoded:
              name: client_id
              required: true
              schema:
                type: string
                description: "O identificador publico de sua aplicação no formato UUID v4. <b>Importante</b>: Valor fornecido pelo time de Implantação."
          Client_secret:
            x-www-form-urlencoded:
              name: client_secret
              required: true
              schema:
                type: string
                description: "O segredo conhecido por sua aplicação e pelo servidor de autorização. <b>Importante</b>: Valor fornecido pelo time de Implantação."
          Scope:
            x-www-form-urlencoded:
              name: scope
              required: true
              schema:
                type: string
                description: "Você poderá utilizar até dez scopes para cada token gerado, separados por um espaço em branco. Exemplo: 'kyc.document.write business.write boleto.read'"
      responses:
        "200":
          description: Token criado com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTokenResponse"
              examples:
                accountDetailedExample:
                  $ref: "#/components/examples/CreateTokenResponseExample"
        "400":
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        "403":
          $ref: "http://localhost:3320/commons/components#/components/responses/403"
        "409":
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        "422":
          $ref: "http://localhost:3320/commons/components#/components/responses/422"
        "500":
          $ref: "http://localhost:3320/commons/components#/components/responses/500"


security:
  - Bearer: []

components:

  schemas:

    CreateTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Token gerado.
        expires_in:
          type: string
          format: date-time
          description: Tempo de expiração do token.
        token_type:
          type: string
          description: Tipo de token. Nesse caso, "Bearer".
        scope:
          type: string
          description: Scopes dos produtos em que o token poderá ser utilizado.

  examples:
    CreateTokenResponseExample:
      value:
        access_token: "{yourAccessToken}"
        expires_in: "2022-05-24T14:27:35.592Z"
        token_type: "Bearer"
        scope: "{yourScope}"
      summary: Token gerado

  securitySchemes:
    Bearer:
      type: http
      description: Inclua um token de autorização do tipo Bearer.
      scheme: bearer

x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
  samples-languages:
    - curl